---
- name: Create AWS EC2 instance
  hosts: localhost
  gather_facts: False

  vars:
    profile: 'meher'
    instance_type: 't2.micro'
    image: 'ami-07caf09b362be10b8'
    region: 'us-east-1'

  tasks:
    - name: Create security group
      amazon.aws.ec2_group:
        profile: "{{ profile }}"
        name: "ansible-security-group"
        description: "Security group for EC2 instance gh self hosted runner"
        vpc_id: "vpc-0735f5b0267022664"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 98.208.42.143/32
        state: present
        tags:
          Name: "ansible-security-group"
          Owner: "Meher"
          Client: "Internal"
          Environment: "Test"
          Project: "DOB"
          Application: "GitHub-Runner"
      register: security_group
    
    - name: debug security group
      debug:
        var: security_group

    - name: Create key pair
      amazon.aws.ec2_key:
        profile: "{{ profile }}"
        name: "gh-runner-key"
        key_type: "ed25519"
        region: "{{ region }}"
        file_name: "~/.ssh/gh-runner-key.pem"
        tags:
          Owner: "Meher"
          Client: "Internal"
          Environment: "Test"
          Project: "DOB"
          Application: "GitHub-Runner"
      register: key_pair

    - name: debug key pair
      debug:
        var: key_pair

    - name: Gather EC2 facts
      amazon.aws.ec2_instance_info:
        profile: "{{ profile }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "Self-Hosted-Runner"
          "tag:Owner": "Meher"
          "tag:Client": "Internal"
          "tag:Environment": "Test"
          "tag:Project": "DOB"
          "tag:Application": "GitHub-Runner"
      register: ec2_facts

    - name: debug ec2 facts
      debug:
        var: ec2_facts

    - name: Create EC2 instance with public IP address
      amazon.aws.ec2_instance:
        profile: "{{ profile }}"
        instance_type: "{{ instance_type }}"
        image: 
          id: "{{ image }}"
        wait: true
        region: "{{ region }}"
        vpc_subnet_id: "subnet-0899fcbb3005800f4"
        security_group: "{{ security_group.group_id }}"
        network:
          assign_public_ip: true
        key_name: "{{ key_pair.key.name }}"
        count: 1
        tags:
          Name: "Self-Hosted-Runner"
          Owner: "Meher"
          Client: "Internal"
          Environment: "Test"
          Project: "DOB"
          Application: "GitHub-Runner"
      register: ec2
      when: 
        - ec2_facts.instances | length == 0

    - name: debug ec2 instance
      debug:
        var: ec2

    - name: Gather latest EC2 facts
      amazon.aws.ec2_instance_info:
        profile: "{{ profile }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "Self-Hosted-Runner"
          "tag:Owner": "Meher"
          "tag:Client": "Internal"
          "tag:Environment": "Test"
          "tag:Project": "DOB"
          "tag:Application": "GitHub-Runner"
      register: ec2_facts
    
    - name: debug ec2 facts
      debug:
        var: ec2_facts
    - name: Add new instance to host group
      add_host:
        # hostname: "{{ item.instances.network_interfaces.association.public_ip }}"
        hostname: "{{ item.network_interfaces[0].association.public_ip }}"
        groupname: ec2hosts
      loop: "{{ ec2_facts.instances }}"
      when: ec2_facts.instances is defined and ec2_facts.instances | length > 0

- name: Install and run GitHub self-hosted runner
  hosts: ec2hosts
  become: yes
  vars:
    github_owner: 'meher-liatrio'
    github_repo: 'ansible-ec2'
    runner_token: "{{ lookup('env','RUNNER_TOKEN') }}"
    runner_name: 'ansible-runner'
    runner_work_dir: '_work'
    ansible_ssh_private_key_file: "~/.ssh/gh-runner-key.pem"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    ansible_user: 'ec2-user'    

  tasks:
    - name: Update system packages
      dnf:
        update_cache: yes

    - name: Install necessary packages
      dnf:
        name:
          - jq
          - libicu
          

    - name: Download runner package
      get_url:
        url: "https://github.com/actions/runner/releases/download/v2.316.0/actions-runner-linux-x64-2.316.0.tar.gz"
        dest: "/tmp/actions-runner.tar.gz"

    - name: Create runner directory
      file:
        path: "/home/{{ ansible_user }}/actions-runner"
        state: directory
    
    - name: Change permissions of actions-runner directory
      file:
        path: "/home/{{ ansible_user }}/actions-runner"
        mode: '755'
        recurse: yes

    - name: Extract runner package
      unarchive:
        src: "/tmp/actions-runner.tar.gz"
        dest: "/home/{{ ansible_user }}/actions-runner"
        mode: '777'
        remote_src: yes

    - name: Check if runner is already configured
      stat:
        path: "/home/{{ ansible_user }}/actions-runner/.runner"
      register: runner_status

    - name: Configure runner
      become: no
      command: "./config.sh --url https://github.com/{{ github_owner }}/{{ github_repo}} --token {{ runner_token }} --unattended"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
      when: not runner_status.stat.exists

    - name: Run Runner
      become: no
      command: "./run.sh"
      args:
        chdir: "/home/{{ ansible_user }}/actions-runner"
...